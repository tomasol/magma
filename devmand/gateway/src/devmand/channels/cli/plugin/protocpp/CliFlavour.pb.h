// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CliFlavour.proto

#ifndef PROTOBUF_CliFlavour_2eproto__INCLUDED
#define PROTOBUF_CliFlavour_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace devmand {
namespace channels {
namespace cli {
namespace plugin {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_CliFlavour_2eproto();
void protobuf_AssignDesc_CliFlavour_2eproto();
void protobuf_ShutdownFile_CliFlavour_2eproto();

class CliFlavourRequest;
class CliFlavourResponse;

// ===================================================================

class CliFlavourRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.CliFlavourRequest)
                                                              */
{
 public:
  CliFlavourRequest();
  virtual ~CliFlavourRequest();

  CliFlavourRequest(const CliFlavourRequest& from);

  inline CliFlavourRequest& operator=(const CliFlavourRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CliFlavourRequest& default_instance();

  void Swap(CliFlavourRequest* other);

  // implements Message ----------------------------------------------

  inline CliFlavourRequest* New() const {
    return New(NULL);
  }

  CliFlavourRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CliFlavourRequest& from);
  void MergeFrom(const CliFlavourRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CliFlavourRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.CliFlavourRequest)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_CliFlavour_2eproto();
  friend void protobuf_AssignDesc_CliFlavour_2eproto();
  friend void protobuf_ShutdownFile_CliFlavour_2eproto();

  void InitAsDefaultInstance();
  static CliFlavourRequest* default_instance_;
};
// -------------------------------------------------------------------

class CliFlavourResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.CliFlavourResponse)
                                                               */
{
 public:
  CliFlavourResponse();
  virtual ~CliFlavourResponse();

  CliFlavourResponse(const CliFlavourResponse& from);

  inline CliFlavourResponse& operator=(const CliFlavourResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CliFlavourResponse& default_instance();

  void Swap(CliFlavourResponse* other);

  // implements Message ----------------------------------------------

  inline CliFlavourResponse* New() const {
    return New(NULL);
  }

  CliFlavourResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CliFlavourResponse& from);
  void MergeFrom(const CliFlavourResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CliFlavourResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string newline = 1;
  void clear_newline();
  static const int kNewlineFieldNumber = 1;
  const ::std::string& newline() const;
  void set_newline(const ::std::string& value);
  void set_newline(const char* value);
  void set_newline(const char* value, size_t size);
  ::std::string* mutable_newline();
  ::std::string* release_newline();
  void set_allocated_newline(::std::string* newline);

  // optional string baseShowConfigRegex = 2;
  void clear_baseshowconfigregex();
  static const int kBaseShowConfigRegexFieldNumber = 2;
  const ::std::string& baseshowconfigregex() const;
  void set_baseshowconfigregex(const ::std::string& value);
  void set_baseshowconfigregex(const char* value);
  void set_baseshowconfigregex(const char* value, size_t size);
  ::std::string* mutable_baseshowconfigregex();
  ::std::string* release_baseshowconfigregex();
  void set_allocated_baseshowconfigregex(::std::string* baseshowconfigregex);

  // optional uint32 baseShowConfigIdx = 3;
  void clear_baseshowconfigidx();
  static const int kBaseShowConfigIdxFieldNumber = 3;
  ::google::protobuf::uint32 baseshowconfigidx() const;
  void set_baseshowconfigidx(::google::protobuf::uint32 value);

  // optional string singleIndentChar = 4;
  void clear_singleindentchar();
  static const int kSingleIndentCharFieldNumber = 4;
  const ::std::string& singleindentchar() const;
  void set_singleindentchar(const ::std::string& value);
  void set_singleindentchar(const char* value);
  void set_singleindentchar(const char* value, size_t size);
  ::std::string* mutable_singleindentchar();
  ::std::string* release_singleindentchar();
  void set_allocated_singleindentchar(::std::string* singleindentchar);

  // optional string configSubsectionEnd = 5;
  void clear_configsubsectionend();
  static const int kConfigSubsectionEndFieldNumber = 5;
  const ::std::string& configsubsectionend() const;
  void set_configsubsectionend(const ::std::string& value);
  void set_configsubsectionend(const char* value);
  void set_configsubsectionend(const char* value, size_t size);
  ::std::string* mutable_configsubsectionend();
  ::std::string* release_configsubsectionend();
  void set_allocated_configsubsectionend(::std::string* configsubsectionend);

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.CliFlavourResponse)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr newline_;
  ::google::protobuf::internal::ArenaStringPtr baseshowconfigregex_;
  ::google::protobuf::internal::ArenaStringPtr singleindentchar_;
  ::google::protobuf::internal::ArenaStringPtr configsubsectionend_;
  ::google::protobuf::uint32 baseshowconfigidx_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_CliFlavour_2eproto();
  friend void protobuf_AssignDesc_CliFlavour_2eproto();
  friend void protobuf_ShutdownFile_CliFlavour_2eproto();

  void InitAsDefaultInstance();
  static CliFlavourResponse* default_instance_;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CliFlavourRequest

// -------------------------------------------------------------------

// CliFlavourResponse

// optional string newline = 1;
inline void CliFlavourResponse::clear_newline() {
  newline_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CliFlavourResponse::newline() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourResponse.newline)
  return newline_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CliFlavourResponse::set_newline(const ::std::string& value) {
  newline_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourResponse.newline)
}
inline void CliFlavourResponse::set_newline(const char* value) {
  newline_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.CliFlavourResponse.newline)
}
inline void CliFlavourResponse::set_newline(const char* value, size_t size) {
  newline_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.CliFlavourResponse.newline)
}
inline ::std::string* CliFlavourResponse::mutable_newline() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CliFlavourResponse.newline)
  return newline_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CliFlavourResponse::release_newline() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CliFlavourResponse.newline)

  return newline_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CliFlavourResponse::set_allocated_newline(::std::string* newline) {
  if (newline != NULL) {
  } else {
  }
  newline_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), newline);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CliFlavourResponse.newline)
}

// optional string baseShowConfigRegex = 2;
inline void CliFlavourResponse::clear_baseshowconfigregex() {
  baseshowconfigregex_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CliFlavourResponse::baseshowconfigregex() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex)
  return baseshowconfigregex_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CliFlavourResponse::set_baseshowconfigregex(
    const ::std::string& value) {
  baseshowconfigregex_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex)
}
inline void CliFlavourResponse::set_baseshowconfigregex(const char* value) {
  baseshowconfigregex_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex)
}
inline void CliFlavourResponse::set_baseshowconfigregex(
    const char* value,
    size_t size) {
  baseshowconfigregex_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex)
}
inline ::std::string* CliFlavourResponse::mutable_baseshowconfigregex() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex)
  return baseshowconfigregex_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CliFlavourResponse::release_baseshowconfigregex() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex)

  return baseshowconfigregex_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CliFlavourResponse::set_allocated_baseshowconfigregex(
    ::std::string* baseshowconfigregex) {
  if (baseshowconfigregex != NULL) {
  } else {
  }
  baseshowconfigregex_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      baseshowconfigregex);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex)
}

// optional uint32 baseShowConfigIdx = 3;
inline void CliFlavourResponse::clear_baseshowconfigidx() {
  baseshowconfigidx_ = 0u;
}
inline ::google::protobuf::uint32 CliFlavourResponse::baseshowconfigidx()
    const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigIdx)
  return baseshowconfigidx_;
}
inline void CliFlavourResponse::set_baseshowconfigidx(
    ::google::protobuf::uint32 value) {
  baseshowconfigidx_ = value;
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigIdx)
}

// optional string singleIndentChar = 4;
inline void CliFlavourResponse::clear_singleindentchar() {
  singleindentchar_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CliFlavourResponse::singleindentchar() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar)
  return singleindentchar_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CliFlavourResponse::set_singleindentchar(
    const ::std::string& value) {
  singleindentchar_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar)
}
inline void CliFlavourResponse::set_singleindentchar(const char* value) {
  singleindentchar_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar)
}
inline void CliFlavourResponse::set_singleindentchar(
    const char* value,
    size_t size) {
  singleindentchar_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar)
}
inline ::std::string* CliFlavourResponse::mutable_singleindentchar() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar)
  return singleindentchar_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CliFlavourResponse::release_singleindentchar() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar)

  return singleindentchar_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CliFlavourResponse::set_allocated_singleindentchar(
    ::std::string* singleindentchar) {
  if (singleindentchar != NULL) {
  } else {
  }
  singleindentchar_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      singleindentchar);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar)
}

// optional string configSubsectionEnd = 5;
inline void CliFlavourResponse::clear_configsubsectionend() {
  configsubsectionend_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CliFlavourResponse::configsubsectionend() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd)
  return configsubsectionend_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CliFlavourResponse::set_configsubsectionend(
    const ::std::string& value) {
  configsubsectionend_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd)
}
inline void CliFlavourResponse::set_configsubsectionend(const char* value) {
  configsubsectionend_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd)
}
inline void CliFlavourResponse::set_configsubsectionend(
    const char* value,
    size_t size) {
  configsubsectionend_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd)
}
inline ::std::string* CliFlavourResponse::mutable_configsubsectionend() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd)
  return configsubsectionend_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CliFlavourResponse::release_configsubsectionend() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd)

  return configsubsectionend_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CliFlavourResponse::set_allocated_configsubsectionend(
    ::std::string* configsubsectionend) {
  if (configsubsectionend != NULL) {
  } else {
  }
  configsubsectionend_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      configsubsectionend);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd)
}

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace plugin
} // namespace cli
} // namespace channels
} // namespace devmand

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_CliFlavour_2eproto__INCLUDED
