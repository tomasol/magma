// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CliFlavour.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#ifdef INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#endif
#include "CliFlavour.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace devmand {
namespace channels {
namespace cli {
namespace plugin {

namespace {

const ::google::protobuf::Descriptor* CliFlavourRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    CliFlavourRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CliFlavourResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    CliFlavourResponse_reflection_ = NULL;

} // namespace

void protobuf_AssignDesc_CliFlavour_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_CliFlavour_2eproto() {
  protobuf_AddDesc_CliFlavour_2eproto();
  const ::google::protobuf::FileDescriptor* file =
      ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
          "CliFlavour.proto");
  GOOGLE_CHECK(file != NULL);
  CliFlavourRequest_descriptor_ = file->message_type(0);
  static const int CliFlavourRequest_offsets_[1] = {};
  CliFlavourRequest_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          CliFlavourRequest_descriptor_,
          CliFlavourRequest::default_instance_,
          CliFlavourRequest_offsets_,
          -1,
          -1,
          -1,
          sizeof(CliFlavourRequest),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CliFlavourRequest, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CliFlavourRequest, _is_default_instance_));
  CliFlavourResponse_descriptor_ = file->message_type(1);
  static const int CliFlavourResponse_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CliFlavourResponse, newline_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CliFlavourResponse, baseshowconfigregex_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CliFlavourResponse, baseshowconfigidx_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CliFlavourResponse, singleindentchar_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CliFlavourResponse, configsubsectionend_),
  };
  CliFlavourResponse_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          CliFlavourResponse_descriptor_,
          CliFlavourResponse::default_instance_,
          CliFlavourResponse_offsets_,
          -1,
          -1,
          -1,
          sizeof(CliFlavourResponse),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CliFlavourResponse, _internal_metadata_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              CliFlavourResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(
      &protobuf_AssignDescriptors_once_,
      &protobuf_AssignDesc_CliFlavour_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CliFlavourRequest_descriptor_, &CliFlavourRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CliFlavourResponse_descriptor_, &CliFlavourResponse::default_instance());
}

} // namespace

void protobuf_ShutdownFile_CliFlavour_2eproto() {
  delete CliFlavourRequest::default_instance_;
  delete CliFlavourRequest_reflection_;
  delete CliFlavourResponse::default_instance_;
  delete CliFlavourResponse_reflection_;
}

void protobuf_AddDesc_CliFlavour_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_CliFlavour_2eproto() {
  static bool already_here = false;
  if (already_here)
    return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      "\n\020CliFlavour.proto\022\033devmand.channels.cli"
      ".plugin\"\023\n\021CliFlavourRequest\"\224\001\n\022CliFlav"
      "ourResponse\022\017\n\007newline\030\001 \001(\t\022\033\n\023baseShow"
      "ConfigRegex\030\002 \001(\t\022\031\n\021baseShowConfigIdx\030\003"
      " \001(\r\022\030\n\020singleIndentChar\030\004 \001(\t\022\033\n\023config"
      "SubsectionEnd\030\005 \001(\t2v\n\nCliFlavour\022h\n\003Get"
      "\022..devmand.channels.cli.plugin.CliFlavou"
      "rRequest\032/.devmand.channels.cli.plugin.C"
      "liFlavourResponse\"\000b\006proto3",
      347);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "CliFlavour.proto", &protobuf_RegisterTypes);
  CliFlavourRequest::default_instance_ = new CliFlavourRequest();
  CliFlavourResponse::default_instance_ = new CliFlavourResponse();
  CliFlavourRequest::default_instance_->InitAsDefaultInstance();
  CliFlavourResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(
      &protobuf_ShutdownFile_CliFlavour_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CliFlavour_2eproto {
  StaticDescriptorInitializer_CliFlavour_2eproto() {
    protobuf_AddDesc_CliFlavour_2eproto();
  }
} static_descriptor_initializer_CliFlavour_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CliFlavourRequest::CliFlavourRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.CliFlavourRequest)
}

void CliFlavourRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CliFlavourRequest::CliFlavourRequest(const CliFlavourRequest& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.CliFlavourRequest)
}

void CliFlavourRequest::SharedCtor() {
  _is_default_instance_ = false;
  _cached_size_ = 0;
}

CliFlavourRequest::~CliFlavourRequest() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.CliFlavourRequest)
  SharedDtor();
}

void CliFlavourRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CliFlavourRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CliFlavourRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CliFlavourRequest_descriptor_;
}

const CliFlavourRequest& CliFlavourRequest::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_CliFlavour_2eproto();
  return *default_instance_;
}

CliFlavourRequest* CliFlavourRequest::default_instance_ = NULL;

CliFlavourRequest* CliFlavourRequest::New(
    ::google::protobuf::Arena* arena) const {
  CliFlavourRequest* n = new CliFlavourRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CliFlavourRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.CliFlavourRequest)
}

bool CliFlavourRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.CliFlavourRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.CliFlavourRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.CliFlavourRequest)
  return false;
#undef DO_
}

void CliFlavourRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.CliFlavourRequest)
  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.CliFlavourRequest)
}

::google::protobuf::uint8*
CliFlavourRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.CliFlavourRequest)
  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.CliFlavourRequest)
  return target;
}

int CliFlavourRequest::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.CliFlavourRequest)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CliFlavourRequest::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.CliFlavourRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CliFlavourRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const CliFlavourRequest>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.CliFlavourRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.CliFlavourRequest)
    MergeFrom(*source);
  }
}

void CliFlavourRequest::MergeFrom(const CliFlavourRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.CliFlavourRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void CliFlavourRequest::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.CliFlavourRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void CliFlavourRequest::CopyFrom(const CliFlavourRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.CliFlavourRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool CliFlavourRequest::IsInitialized() const {
  return true;
}

void CliFlavourRequest::Swap(CliFlavourRequest* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void CliFlavourRequest::InternalSwap(CliFlavourRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CliFlavourRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CliFlavourRequest_descriptor_;
  metadata.reflection = CliFlavourRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CliFlavourRequest

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CliFlavourResponse::kNewlineFieldNumber;
const int CliFlavourResponse::kBaseShowConfigRegexFieldNumber;
const int CliFlavourResponse::kBaseShowConfigIdxFieldNumber;
const int CliFlavourResponse::kSingleIndentCharFieldNumber;
const int CliFlavourResponse::kConfigSubsectionEndFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CliFlavourResponse::CliFlavourResponse()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:devmand.channels.cli.plugin.CliFlavourResponse)
}

void CliFlavourResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CliFlavourResponse::CliFlavourResponse(const CliFlavourResponse& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:devmand.channels.cli.plugin.CliFlavourResponse)
}

void CliFlavourResponse::SharedCtor() {
  _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  newline_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseshowconfigregex_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseshowconfigidx_ = 0u;
  singleindentchar_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configsubsectionend_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CliFlavourResponse::~CliFlavourResponse() {
  // @@protoc_insertion_point(destructor:devmand.channels.cli.plugin.CliFlavourResponse)
  SharedDtor();
}

void CliFlavourResponse::SharedDtor() {
  newline_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseshowconfigregex_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  singleindentchar_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configsubsectionend_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CliFlavourResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CliFlavourResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CliFlavourResponse_descriptor_;
}

const CliFlavourResponse& CliFlavourResponse::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_CliFlavour_2eproto();
  return *default_instance_;
}

CliFlavourResponse* CliFlavourResponse::default_instance_ = NULL;

CliFlavourResponse* CliFlavourResponse::New(
    ::google::protobuf::Arena* arena) const {
  CliFlavourResponse* n = new CliFlavourResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CliFlavourResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:devmand.channels.cli.plugin.CliFlavourResponse)
  newline_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseshowconfigregex_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseshowconfigidx_ = 0u;
  singleindentchar_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configsubsectionend_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CliFlavourResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:devmand.channels.cli.plugin.CliFlavourResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string newline = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_newline()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->newline().data(),
(int)              this->newline().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.CliFlavourResponse.newline"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_baseShowConfigRegex;
        break;
      }

      // optional string baseShowConfigRegex = 2;
      case 2: {
        if (tag == 18) {
        parse_baseShowConfigRegex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_baseshowconfigregex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->baseshowconfigregex().data(),
(int)              this->baseshowconfigregex().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24))
          goto parse_baseShowConfigIdx;
        break;
      }

      // optional uint32 baseShowConfigIdx = 3;
      case 3: {
        if (tag == 24) {
        parse_baseShowConfigIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::uint32,
               ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
              input, &baseshowconfigidx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34))
          goto parse_singleIndentChar;
        break;
      }

      // optional string singleIndentChar = 4;
      case 4: {
        if (tag == 34) {
        parse_singleIndentChar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_singleindentchar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->singleindentchar().data(),
(int)              this->singleindentchar().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42))
          goto parse_configSubsectionEnd;
        break;
      }

      // optional string configSubsectionEnd = 5;
      case 5: {
        if (tag == 42) {
        parse_configSubsectionEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_configsubsectionend()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->configsubsectionend().data(),
(int)              this->configsubsectionend().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:devmand.channels.cli.plugin.CliFlavourResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:devmand.channels.cli.plugin.CliFlavourResponse)
  return false;
#undef DO_
}

void CliFlavourResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  (void)output;
  // @@protoc_insertion_point(serialize_start:devmand.channels.cli.plugin.CliFlavourResponse)
  // optional string newline = 1;
  if (this->newline().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->newline().data(),
(int)        this->newline().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourResponse.newline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->newline(), output);
  }

  // optional string baseShowConfigRegex = 2;
  if (this->baseshowconfigregex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->baseshowconfigregex().data(),
(int)        this->baseshowconfigregex().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->baseshowconfigregex(), output);
  }

  // optional uint32 baseShowConfigIdx = 3;
  if (this->baseshowconfigidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
        3, this->baseshowconfigidx(), output);
  }

  // optional string singleIndentChar = 4;
  if (this->singleindentchar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->singleindentchar().data(),
(int)        this->singleindentchar().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        4, this->singleindentchar(), output);
  }

  // optional string configSubsectionEnd = 5;
  if (this->configsubsectionend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->configsubsectionend().data(),
(int)        this->configsubsectionend().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        5, this->configsubsectionend(), output);
  }

  // @@protoc_insertion_point(serialize_end:devmand.channels.cli.plugin.CliFlavourResponse)
}

::google::protobuf::uint8*
CliFlavourResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const {
  (void)deterministic;
  // @@protoc_insertion_point(serialize_to_array_start:devmand.channels.cli.plugin.CliFlavourResponse)
  // optional string newline = 1;
  if (this->newline().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->newline().data(),
(int)        this->newline().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourResponse.newline");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->newline(), target);
  }

  // optional string baseShowConfigRegex = 2;
  if (this->baseshowconfigregex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->baseshowconfigregex().data(),
(int)        this->baseshowconfigregex().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->baseshowconfigregex(), target);
  }

  // optional uint32 baseShowConfigIdx = 3;
  if (this->baseshowconfigidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(
        3, this->baseshowconfigidx(), target);
  }

  // optional string singleIndentChar = 4;
  if (this->singleindentchar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->singleindentchar().data(),
(int)        this->singleindentchar().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->singleindentchar(), target);
  }

  // optional string configSubsectionEnd = 5;
  if (this->configsubsectionend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->configsubsectionend().data(),
(int)        this->configsubsectionend().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->configsubsectionend(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:devmand.channels.cli.plugin.CliFlavourResponse)
  return target;
}

int CliFlavourResponse::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:devmand.channels.cli.plugin.CliFlavourResponse)
  int total_size = 0;

  // optional string newline = 1;
  if (this->newline().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
                      this->newline());
  }

  // optional string baseShowConfigRegex = 2;
  if (this->baseshowconfigregex().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
                      this->baseshowconfigregex());
  }

  // optional uint32 baseShowConfigIdx = 3;
  if (this->baseshowconfigidx() != 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
                      this->baseshowconfigidx());
  }

  // optional string singleIndentChar = 4;
  if (this->singleindentchar().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
                      this->singleindentchar());
  }

  // optional string configSubsectionEnd = 5;
  if (this->configsubsectionend().size() > 0) {
    total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
                      this->configsubsectionend());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CliFlavourResponse::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:devmand.channels.cli.plugin.CliFlavourResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CliFlavourResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const CliFlavourResponse>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:devmand.channels.cli.plugin.CliFlavourResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:devmand.channels.cli.plugin.CliFlavourResponse)
    MergeFrom(*source);
  }
}

void CliFlavourResponse::MergeFrom(const CliFlavourResponse& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:devmand.channels.cli.plugin.CliFlavourResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.newline().size() > 0) {
    newline_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.newline_);
  }
  if (from.baseshowconfigregex().size() > 0) {
    baseshowconfigregex_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.baseshowconfigregex_);
  }
  if (from.baseshowconfigidx() != 0) {
    set_baseshowconfigidx(from.baseshowconfigidx());
  }
  if (from.singleindentchar().size() > 0) {
    singleindentchar_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.singleindentchar_);
  }
  if (from.configsubsectionend().size() > 0) {
    configsubsectionend_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.configsubsectionend_);
  }
}

void CliFlavourResponse::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:devmand.channels.cli.plugin.CliFlavourResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void CliFlavourResponse::CopyFrom(const CliFlavourResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:devmand.channels.cli.plugin.CliFlavourResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool CliFlavourResponse::IsInitialized() const {
  return true;
}

void CliFlavourResponse::Swap(CliFlavourResponse* other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void CliFlavourResponse::InternalSwap(CliFlavourResponse* other) {
  newline_.Swap(&other->newline_);
  baseshowconfigregex_.Swap(&other->baseshowconfigregex_);
  std::swap(baseshowconfigidx_, other->baseshowconfigidx_);
  singleindentchar_.Swap(&other->singleindentchar_);
  configsubsectionend_.Swap(&other->configsubsectionend_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CliFlavourResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CliFlavourResponse_descriptor_;
  metadata.reflection = CliFlavourResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CliFlavourResponse

// optional string newline = 1;
void CliFlavourResponse::clear_newline() {
  newline_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CliFlavourResponse::newline() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourResponse.newline)
  return newline_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourResponse::set_newline(const ::std::string& value) {
  newline_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourResponse.newline)
}
void CliFlavourResponse::set_newline(const char* value) {
  newline_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.CliFlavourResponse.newline)
}
void CliFlavourResponse::set_newline(const char* value, size_t size) {
  newline_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.CliFlavourResponse.newline)
}
::std::string* CliFlavourResponse::mutable_newline() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CliFlavourResponse.newline)
  return newline_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CliFlavourResponse::release_newline() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CliFlavourResponse.newline)

  return newline_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourResponse::set_allocated_newline(::std::string* newline) {
  if (newline != NULL) {
  } else {
  }
  newline_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), newline);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CliFlavourResponse.newline)
}

// optional string baseShowConfigRegex = 2;
void CliFlavourResponse::clear_baseshowconfigregex() {
  baseshowconfigregex_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CliFlavourResponse::baseshowconfigregex() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex)
  return baseshowconfigregex_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourResponse::set_baseshowconfigregex(const ::std::string& value) {
  baseshowconfigregex_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex)
}
void CliFlavourResponse::set_baseshowconfigregex(const char* value) {
  baseshowconfigregex_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex)
}
void CliFlavourResponse::set_baseshowconfigregex(
    const char* value,
    size_t size) {
  baseshowconfigregex_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex)
}
::std::string* CliFlavourResponse::mutable_baseshowconfigregex() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex)
  return baseshowconfigregex_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CliFlavourResponse::release_baseshowconfigregex() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex)

  return baseshowconfigregex_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourResponse::set_allocated_baseshowconfigregex(
    ::std::string* baseshowconfigregex) {
  if (baseshowconfigregex != NULL) {
  } else {
  }
  baseshowconfigregex_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      baseshowconfigregex);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigRegex)
}

// optional uint32 baseShowConfigIdx = 3;
void CliFlavourResponse::clear_baseshowconfigidx() {
  baseshowconfigidx_ = 0u;
}
::google::protobuf::uint32 CliFlavourResponse::baseshowconfigidx() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigIdx)
  return baseshowconfigidx_;
}
void CliFlavourResponse::set_baseshowconfigidx(
    ::google::protobuf::uint32 value) {
  baseshowconfigidx_ = value;
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourResponse.baseShowConfigIdx)
}

// optional string singleIndentChar = 4;
void CliFlavourResponse::clear_singleindentchar() {
  singleindentchar_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CliFlavourResponse::singleindentchar() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar)
  return singleindentchar_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourResponse::set_singleindentchar(const ::std::string& value) {
  singleindentchar_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar)
}
void CliFlavourResponse::set_singleindentchar(const char* value) {
  singleindentchar_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar)
}
void CliFlavourResponse::set_singleindentchar(const char* value, size_t size) {
  singleindentchar_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar)
}
::std::string* CliFlavourResponse::mutable_singleindentchar() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar)
  return singleindentchar_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CliFlavourResponse::release_singleindentchar() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar)

  return singleindentchar_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourResponse::set_allocated_singleindentchar(
    ::std::string* singleindentchar) {
  if (singleindentchar != NULL) {
  } else {
  }
  singleindentchar_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      singleindentchar);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CliFlavourResponse.singleIndentChar)
}

// optional string configSubsectionEnd = 5;
void CliFlavourResponse::clear_configsubsectionend() {
  configsubsectionend_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CliFlavourResponse::configsubsectionend() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd)
  return configsubsectionend_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourResponse::set_configsubsectionend(const ::std::string& value) {
  configsubsectionend_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd)
}
void CliFlavourResponse::set_configsubsectionend(const char* value) {
  configsubsectionend_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd)
}
void CliFlavourResponse::set_configsubsectionend(
    const char* value,
    size_t size) {
  configsubsectionend_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd)
}
::std::string* CliFlavourResponse::mutable_configsubsectionend() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd)
  return configsubsectionend_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CliFlavourResponse::release_configsubsectionend() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd)

  return configsubsectionend_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliFlavourResponse::set_allocated_configsubsectionend(
    ::std::string* configsubsectionend) {
  if (configsubsectionend != NULL) {
  } else {
  }
  configsubsectionend_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      configsubsectionend);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CliFlavourResponse.configSubsectionEnd)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace plugin
} // namespace cli
} // namespace channels
} // namespace devmand

// @@protoc_insertion_point(global_scope)
