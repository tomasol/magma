// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: CliFlavour.proto

#include "CliFlavour.grpc.pb.h"
#include "CliFlavour.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace devmand {
namespace channels {
namespace cli {
namespace plugin {

static const char* CliFlavour_method_names[] = {
    "/devmand.channels.cli.plugin.CliFlavour/Get",
};

std::unique_ptr<CliFlavour::Stub> CliFlavour::NewStub(
    const std::shared_ptr<::grpc::ChannelInterface>& channel,
    const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr<CliFlavour::Stub> stub(new CliFlavour::Stub(channel));
  return stub;
}

CliFlavour::Stub::Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel)
    : channel_(channel),
      rpcmethod_Get_(
          CliFlavour_method_names[0],
          ::grpc::RpcMethod::NORMAL_RPC,
          channel) {}

::grpc::Status CliFlavour::Stub::Get(
    ::grpc::ClientContext* context,
    const ::devmand::channels::cli::plugin::CliFlavourRequest& request,
    ::devmand::channels::cli::plugin::CliFlavourResponse* response) {
  return ::grpc::BlockingUnaryCall(
      channel_.get(), rpcmethod_Get_, context, request, response);
}

::grpc::ClientAsyncResponseReader<
    ::devmand::channels::cli::plugin::CliFlavourResponse>*
CliFlavour::Stub::AsyncGetRaw(
    ::grpc::ClientContext* context,
    const ::devmand::channels::cli::plugin::CliFlavourRequest& request,
    ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader<
      ::devmand::channels::cli::plugin::CliFlavourResponse>(
      channel_.get(), cq, rpcmethod_Get_, context, request);
}

CliFlavour::Service::Service() {
  (void)CliFlavour_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      CliFlavour_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler<
          CliFlavour::Service,
          ::devmand::channels::cli::plugin::CliFlavourRequest,
          ::devmand::channels::cli::plugin::CliFlavourResponse>(
          std::mem_fn(&CliFlavour::Service::Get), this)));
}

CliFlavour::Service::~Service() {}

::grpc::Status CliFlavour::Service::Get(
    ::grpc::ServerContext* context,
    const ::devmand::channels::cli::plugin::CliFlavourRequest* request,
    ::devmand::channels::cli::plugin::CliFlavourResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

} // namespace plugin
} // namespace cli
} // namespace channels
} // namespace devmand
