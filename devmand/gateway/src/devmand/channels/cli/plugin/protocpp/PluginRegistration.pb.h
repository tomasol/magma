// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PluginRegistration.proto

#ifndef PROTOBUF_PluginRegistration_2eproto__INCLUDED
#define PROTOBUF_PluginRegistration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace devmand {
namespace channels {
namespace cli {
namespace plugin {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_PluginRegistration_2eproto();
void protobuf_AssignDesc_PluginRegistration_2eproto();
void protobuf_ShutdownFile_PluginRegistration_2eproto();

class CapabilitiesRequest;
class CapabilitiesResponse;
class DeviceType;
class ReaderCapability;
class WriterCapability;

// ===================================================================

class CapabilitiesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.CapabilitiesRequest)
                                                                */
{
 public:
  CapabilitiesRequest();
  virtual ~CapabilitiesRequest();

  CapabilitiesRequest(const CapabilitiesRequest& from);

  inline CapabilitiesRequest& operator=(const CapabilitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CapabilitiesRequest& default_instance();

  void Swap(CapabilitiesRequest* other);

  // implements Message ----------------------------------------------

  inline CapabilitiesRequest* New() const {
    return New(NULL);
  }

  CapabilitiesRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CapabilitiesRequest& from);
  void MergeFrom(const CapabilitiesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CapabilitiesRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.CapabilitiesRequest)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_PluginRegistration_2eproto();
  friend void protobuf_AssignDesc_PluginRegistration_2eproto();
  friend void protobuf_ShutdownFile_PluginRegistration_2eproto();

  void InitAsDefaultInstance();
  static CapabilitiesRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeviceType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.DeviceType)
                                                       */
{
 public:
  DeviceType();
  virtual ~DeviceType();

  DeviceType(const DeviceType& from);

  inline DeviceType& operator=(const DeviceType& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceType& default_instance();

  void Swap(DeviceType* other);

  // implements Message ----------------------------------------------

  inline DeviceType* New() const {
    return New(NULL);
  }

  DeviceType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceType& from);
  void MergeFrom(const DeviceType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceType* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string device = 1;
  void clear_device();
  static const int kDeviceFieldNumber = 1;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // optional string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.DeviceType)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_PluginRegistration_2eproto();
  friend void protobuf_AssignDesc_PluginRegistration_2eproto();
  friend void protobuf_ShutdownFile_PluginRegistration_2eproto();

  void InitAsDefaultInstance();
  static DeviceType* default_instance_;
};
// -------------------------------------------------------------------

class ReaderCapability : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.ReaderCapability)
                                                             */
{
 public:
  ReaderCapability();
  virtual ~ReaderCapability();

  ReaderCapability(const ReaderCapability& from);

  inline ReaderCapability& operator=(const ReaderCapability& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReaderCapability& default_instance();

  void Swap(ReaderCapability* other);

  // implements Message ----------------------------------------------

  inline ReaderCapability* New() const {
    return New(NULL);
  }

  ReaderCapability* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReaderCapability& from);
  void MergeFrom(const ReaderCapability& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReaderCapability* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.ReaderCapability)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_PluginRegistration_2eproto();
  friend void protobuf_AssignDesc_PluginRegistration_2eproto();
  friend void protobuf_ShutdownFile_PluginRegistration_2eproto();

  void InitAsDefaultInstance();
  static ReaderCapability* default_instance_;
};
// -------------------------------------------------------------------

class WriterCapability : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.WriterCapability)
                                                             */
{
 public:
  WriterCapability();
  virtual ~WriterCapability();

  WriterCapability(const WriterCapability& from);

  inline WriterCapability& operator=(const WriterCapability& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriterCapability& default_instance();

  void Swap(WriterCapability* other);

  // implements Message ----------------------------------------------

  inline WriterCapability* New() const {
    return New(NULL);
  }

  WriterCapability* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriterCapability& from);
  void MergeFrom(const WriterCapability& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriterCapability* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // repeated string dependencies = 2;
  int dependencies_size() const;
  void clear_dependencies();
  static const int kDependenciesFieldNumber = 2;
  const ::std::string& dependencies(int index) const;
  ::std::string* mutable_dependencies(int index);
  void set_dependencies(int index, const ::std::string& value);
  void set_dependencies(int index, const char* value);
  void set_dependencies(int index, const char* value, size_t size);
  ::std::string* add_dependencies();
  void add_dependencies(const ::std::string& value);
  void add_dependencies(const char* value);
  void add_dependencies(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& dependencies()
      const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_dependencies();

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.WriterCapability)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::RepeatedPtrField<::std::string> dependencies_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_PluginRegistration_2eproto();
  friend void protobuf_AssignDesc_PluginRegistration_2eproto();
  friend void protobuf_ShutdownFile_PluginRegistration_2eproto();

  void InitAsDefaultInstance();
  static WriterCapability* default_instance_;
};
// -------------------------------------------------------------------

class CapabilitiesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:devmand.channels.cli.plugin.CapabilitiesResponse)
                                                                 */
{
 public:
  CapabilitiesResponse();
  virtual ~CapabilitiesResponse();

  CapabilitiesResponse(const CapabilitiesResponse& from);

  inline CapabilitiesResponse& operator=(const CapabilitiesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CapabilitiesResponse& default_instance();

  void Swap(CapabilitiesResponse* other);

  // implements Message ----------------------------------------------

  inline CapabilitiesResponse* New() const {
    return New(NULL);
  }

  CapabilitiesResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CapabilitiesResponse& from);
  void MergeFrom(const CapabilitiesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const {
    return _cached_size_;
  }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CapabilitiesResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .devmand.channels.cli.plugin.DeviceType deviceType = 1;
  bool has_devicetype() const;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 1;
  const ::devmand::channels::cli::plugin::DeviceType& devicetype() const;
  ::devmand::channels::cli::plugin::DeviceType* mutable_devicetype();
  ::devmand::channels::cli::plugin::DeviceType* release_devicetype();
  void set_allocated_devicetype(
      ::devmand::channels::cli::plugin::DeviceType* devicetype);

  // repeated .devmand.channels.cli.plugin.ReaderCapability readers = 2;
  int readers_size() const;
  void clear_readers();
  static const int kReadersFieldNumber = 2;
  const ::devmand::channels::cli::plugin::ReaderCapability& readers(
      int index) const;
  ::devmand::channels::cli::plugin::ReaderCapability* mutable_readers(
      int index);
  ::devmand::channels::cli::plugin::ReaderCapability* add_readers();
  ::google::protobuf::RepeatedPtrField<
      ::devmand::channels::cli::plugin::ReaderCapability>*
  mutable_readers();
  const ::google::protobuf::RepeatedPtrField<
      ::devmand::channels::cli::plugin::ReaderCapability>&
  readers() const;

  // repeated .devmand.channels.cli.plugin.ReaderCapability listReaders = 3;
  int listreaders_size() const;
  void clear_listreaders();
  static const int kListReadersFieldNumber = 3;
  const ::devmand::channels::cli::plugin::ReaderCapability& listreaders(
      int index) const;
  ::devmand::channels::cli::plugin::ReaderCapability* mutable_listreaders(
      int index);
  ::devmand::channels::cli::plugin::ReaderCapability* add_listreaders();
  ::google::protobuf::RepeatedPtrField<
      ::devmand::channels::cli::plugin::ReaderCapability>*
  mutable_listreaders();
  const ::google::protobuf::RepeatedPtrField<
      ::devmand::channels::cli::plugin::ReaderCapability>&
  listreaders() const;

  // repeated .devmand.channels.cli.plugin.WriterCapability writers = 4;
  int writers_size() const;
  void clear_writers();
  static const int kWritersFieldNumber = 4;
  const ::devmand::channels::cli::plugin::WriterCapability& writers(
      int index) const;
  ::devmand::channels::cli::plugin::WriterCapability* mutable_writers(
      int index);
  ::devmand::channels::cli::plugin::WriterCapability* add_writers();
  ::google::protobuf::RepeatedPtrField<
      ::devmand::channels::cli::plugin::WriterCapability>*
  mutable_writers();
  const ::google::protobuf::RepeatedPtrField<
      ::devmand::channels::cli::plugin::WriterCapability>&
  writers() const;

  // @@protoc_insertion_point(class_scope:devmand.channels.cli.plugin.CapabilitiesResponse)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::devmand::channels::cli::plugin::DeviceType* devicetype_;
  ::google::protobuf::RepeatedPtrField<
      ::devmand::channels::cli::plugin::ReaderCapability>
      readers_;
  ::google::protobuf::RepeatedPtrField<
      ::devmand::channels::cli::plugin::ReaderCapability>
      listreaders_;
  ::google::protobuf::RepeatedPtrField<
      ::devmand::channels::cli::plugin::WriterCapability>
      writers_;
  mutable int _cached_size_;
  friend void protobuf_AddDesc_PluginRegistration_2eproto();
  friend void protobuf_AssignDesc_PluginRegistration_2eproto();
  friend void protobuf_ShutdownFile_PluginRegistration_2eproto();

  void InitAsDefaultInstance();
  static CapabilitiesResponse* default_instance_;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CapabilitiesRequest

// optional string id = 1;
inline void CapabilitiesRequest::clear_id() {
  id_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CapabilitiesRequest::id() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CapabilitiesRequest.id)
  return id_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CapabilitiesRequest::set_id(const ::std::string& value) {
  id_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.CapabilitiesRequest.id)
}
inline void CapabilitiesRequest::set_id(const char* value) {
  id_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.CapabilitiesRequest.id)
}
inline void CapabilitiesRequest::set_id(const char* value, size_t size) {
  id_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.CapabilitiesRequest.id)
}
inline ::std::string* CapabilitiesRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CapabilitiesRequest.id)
  return id_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CapabilitiesRequest::release_id() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CapabilitiesRequest.id)

  return id_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CapabilitiesRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
  } else {
  }
  id_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CapabilitiesRequest.id)
}

// -------------------------------------------------------------------

// DeviceType

// optional string device = 1;
inline void DeviceType::clear_device() {
  device_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceType::device() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.DeviceType.device)
  return device_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceType::set_device(const ::std::string& value) {
  device_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.DeviceType.device)
}
inline void DeviceType::set_device(const char* value) {
  device_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.DeviceType.device)
}
inline void DeviceType::set_device(const char* value, size_t size) {
  device_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.DeviceType.device)
}
inline ::std::string* DeviceType::mutable_device() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.DeviceType.device)
  return device_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceType::release_device() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.DeviceType.device)

  return device_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceType::set_allocated_device(::std::string* device) {
  if (device != NULL) {
  } else {
  }
  device_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.DeviceType.device)
}

// optional string version = 2;
inline void DeviceType::clear_version() {
  version_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceType::version() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.DeviceType.version)
  return version_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceType::set_version(const ::std::string& value) {
  version_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.DeviceType.version)
}
inline void DeviceType::set_version(const char* value) {
  version_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.DeviceType.version)
}
inline void DeviceType::set_version(const char* value, size_t size) {
  version_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.DeviceType.version)
}
inline ::std::string* DeviceType::mutable_version() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.DeviceType.version)
  return version_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceType::release_version() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.DeviceType.version)

  return version_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceType::set_allocated_version(::std::string* version) {
  if (version != NULL) {
  } else {
  }
  version_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.DeviceType.version)
}

// -------------------------------------------------------------------

// ReaderCapability

// optional string path = 1;
inline void ReaderCapability::clear_path() {
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReaderCapability::path() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.ReaderCapability.path)
  return path_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReaderCapability::set_path(const ::std::string& value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.ReaderCapability.path)
}
inline void ReaderCapability::set_path(const char* value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.ReaderCapability.path)
}
inline void ReaderCapability::set_path(const char* value, size_t size) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.ReaderCapability.path)
}
inline ::std::string* ReaderCapability::mutable_path() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.ReaderCapability.path)
  return path_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReaderCapability::release_path() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.ReaderCapability.path)

  return path_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReaderCapability::set_allocated_path(::std::string* path) {
  if (path != NULL) {
  } else {
  }
  path_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.ReaderCapability.path)
}

// -------------------------------------------------------------------

// WriterCapability

// optional string path = 1;
inline void WriterCapability::clear_path() {
  path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriterCapability::path() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.WriterCapability.path)
  return path_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriterCapability::set_path(const ::std::string& value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.WriterCapability.path)
}
inline void WriterCapability::set_path(const char* value) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.WriterCapability.path)
}
inline void WriterCapability::set_path(const char* value, size_t size) {
  path_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.WriterCapability.path)
}
inline ::std::string* WriterCapability::mutable_path() {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.WriterCapability.path)
  return path_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriterCapability::release_path() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.WriterCapability.path)

  return path_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriterCapability::set_allocated_path(::std::string* path) {
  if (path != NULL) {
  } else {
  }
  path_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.WriterCapability.path)
}

// repeated string dependencies = 2;
inline int WriterCapability::dependencies_size() const {
  return dependencies_.size();
}
inline void WriterCapability::clear_dependencies() {
  dependencies_.Clear();
}
inline const ::std::string& WriterCapability::dependencies(int index) const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.WriterCapability.dependencies)
  return dependencies_.Get(index);
}
inline ::std::string* WriterCapability::mutable_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.WriterCapability.dependencies)
  return dependencies_.Mutable(index);
}
inline void WriterCapability::set_dependencies(
    int index,
    const ::std::string& value) {
  // @@protoc_insertion_point(field_set:devmand.channels.cli.plugin.WriterCapability.dependencies)
  dependencies_.Mutable(index)->assign(value);
}
inline void WriterCapability::set_dependencies(int index, const char* value) {
  dependencies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:devmand.channels.cli.plugin.WriterCapability.dependencies)
}
inline void
WriterCapability::set_dependencies(int index, const char* value, size_t size) {
  dependencies_.Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:devmand.channels.cli.plugin.WriterCapability.dependencies)
}
inline ::std::string* WriterCapability::add_dependencies() {
  // @@protoc_insertion_point(field_add_mutable:devmand.channels.cli.plugin.WriterCapability.dependencies)
  return dependencies_.Add();
}
inline void WriterCapability::add_dependencies(const ::std::string& value) {
  dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:devmand.channels.cli.plugin.WriterCapability.dependencies)
}
inline void WriterCapability::add_dependencies(const char* value) {
  dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:devmand.channels.cli.plugin.WriterCapability.dependencies)
}
inline void WriterCapability::add_dependencies(const char* value, size_t size) {
  dependencies_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:devmand.channels.cli.plugin.WriterCapability.dependencies)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
WriterCapability::dependencies() const {
  // @@protoc_insertion_point(field_list:devmand.channels.cli.plugin.WriterCapability.dependencies)
  return dependencies_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
WriterCapability::mutable_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:devmand.channels.cli.plugin.WriterCapability.dependencies)
  return &dependencies_;
}

// -------------------------------------------------------------------

// CapabilitiesResponse

// optional .devmand.channels.cli.plugin.DeviceType deviceType = 1;
inline bool CapabilitiesResponse::has_devicetype() const {
  return !_is_default_instance_ && devicetype_ != NULL;
}
inline void CapabilitiesResponse::clear_devicetype() {
  if (GetArenaNoVirtual() == NULL && devicetype_ != NULL)
    delete devicetype_;
  devicetype_ = NULL;
}
inline const ::devmand::channels::cli::plugin::DeviceType&
CapabilitiesResponse::devicetype() const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CapabilitiesResponse.deviceType)
  return devicetype_ != NULL ? *devicetype_ : *default_instance_->devicetype_;
}
inline ::devmand::channels::cli::plugin::DeviceType*
CapabilitiesResponse::mutable_devicetype() {
  if (devicetype_ == NULL) {
    devicetype_ = new ::devmand::channels::cli::plugin::DeviceType;
  }
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CapabilitiesResponse.deviceType)
  return devicetype_;
}
inline ::devmand::channels::cli::plugin::DeviceType*
CapabilitiesResponse::release_devicetype() {
  // @@protoc_insertion_point(field_release:devmand.channels.cli.plugin.CapabilitiesResponse.deviceType)

  ::devmand::channels::cli::plugin::DeviceType* temp = devicetype_;
  devicetype_ = NULL;
  return temp;
}
inline void CapabilitiesResponse::set_allocated_devicetype(
    ::devmand::channels::cli::plugin::DeviceType* devicetype) {
  delete devicetype_;
  devicetype_ = devicetype;
  if (devicetype) {
  } else {
  }
  // @@protoc_insertion_point(field_set_allocated:devmand.channels.cli.plugin.CapabilitiesResponse.deviceType)
}

// repeated .devmand.channels.cli.plugin.ReaderCapability readers = 2;
inline int CapabilitiesResponse::readers_size() const {
  return readers_.size();
}
inline void CapabilitiesResponse::clear_readers() {
  readers_.Clear();
}
inline const ::devmand::channels::cli::plugin::ReaderCapability&
CapabilitiesResponse::readers(int index) const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CapabilitiesResponse.readers)
  return readers_.Get(index);
}
inline ::devmand::channels::cli::plugin::ReaderCapability*
CapabilitiesResponse::mutable_readers(int index) {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CapabilitiesResponse.readers)
  return readers_.Mutable(index);
}
inline ::devmand::channels::cli::plugin::ReaderCapability*
CapabilitiesResponse::add_readers() {
  // @@protoc_insertion_point(field_add:devmand.channels.cli.plugin.CapabilitiesResponse.readers)
  return readers_.Add();
}
inline ::google::protobuf::RepeatedPtrField<
    ::devmand::channels::cli::plugin::ReaderCapability>*
CapabilitiesResponse::mutable_readers() {
  // @@protoc_insertion_point(field_mutable_list:devmand.channels.cli.plugin.CapabilitiesResponse.readers)
  return &readers_;
}
inline const ::google::protobuf::RepeatedPtrField<
    ::devmand::channels::cli::plugin::ReaderCapability>&
CapabilitiesResponse::readers() const {
  // @@protoc_insertion_point(field_list:devmand.channels.cli.plugin.CapabilitiesResponse.readers)
  return readers_;
}

// repeated .devmand.channels.cli.plugin.ReaderCapability listReaders = 3;
inline int CapabilitiesResponse::listreaders_size() const {
  return listreaders_.size();
}
inline void CapabilitiesResponse::clear_listreaders() {
  listreaders_.Clear();
}
inline const ::devmand::channels::cli::plugin::ReaderCapability&
CapabilitiesResponse::listreaders(int index) const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CapabilitiesResponse.listReaders)
  return listreaders_.Get(index);
}
inline ::devmand::channels::cli::plugin::ReaderCapability*
CapabilitiesResponse::mutable_listreaders(int index) {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CapabilitiesResponse.listReaders)
  return listreaders_.Mutable(index);
}
inline ::devmand::channels::cli::plugin::ReaderCapability*
CapabilitiesResponse::add_listreaders() {
  // @@protoc_insertion_point(field_add:devmand.channels.cli.plugin.CapabilitiesResponse.listReaders)
  return listreaders_.Add();
}
inline ::google::protobuf::RepeatedPtrField<
    ::devmand::channels::cli::plugin::ReaderCapability>*
CapabilitiesResponse::mutable_listreaders() {
  // @@protoc_insertion_point(field_mutable_list:devmand.channels.cli.plugin.CapabilitiesResponse.listReaders)
  return &listreaders_;
}
inline const ::google::protobuf::RepeatedPtrField<
    ::devmand::channels::cli::plugin::ReaderCapability>&
CapabilitiesResponse::listreaders() const {
  // @@protoc_insertion_point(field_list:devmand.channels.cli.plugin.CapabilitiesResponse.listReaders)
  return listreaders_;
}

// repeated .devmand.channels.cli.plugin.WriterCapability writers = 4;
inline int CapabilitiesResponse::writers_size() const {
  return writers_.size();
}
inline void CapabilitiesResponse::clear_writers() {
  writers_.Clear();
}
inline const ::devmand::channels::cli::plugin::WriterCapability&
CapabilitiesResponse::writers(int index) const {
  // @@protoc_insertion_point(field_get:devmand.channels.cli.plugin.CapabilitiesResponse.writers)
  return writers_.Get(index);
}
inline ::devmand::channels::cli::plugin::WriterCapability*
CapabilitiesResponse::mutable_writers(int index) {
  // @@protoc_insertion_point(field_mutable:devmand.channels.cli.plugin.CapabilitiesResponse.writers)
  return writers_.Mutable(index);
}
inline ::devmand::channels::cli::plugin::WriterCapability*
CapabilitiesResponse::add_writers() {
  // @@protoc_insertion_point(field_add:devmand.channels.cli.plugin.CapabilitiesResponse.writers)
  return writers_.Add();
}
inline ::google::protobuf::RepeatedPtrField<
    ::devmand::channels::cli::plugin::WriterCapability>*
CapabilitiesResponse::mutable_writers() {
  // @@protoc_insertion_point(field_mutable_list:devmand.channels.cli.plugin.CapabilitiesResponse.writers)
  return &writers_;
}
inline const ::google::protobuf::RepeatedPtrField<
    ::devmand::channels::cli::plugin::WriterCapability>&
CapabilitiesResponse::writers() const {
  // @@protoc_insertion_point(field_list:devmand.channels.cli.plugin.CapabilitiesResponse.writers)
  return writers_;
}

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace plugin
} // namespace cli
} // namespace channels
} // namespace devmand

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_PluginRegistration_2eproto__INCLUDED
